[2] JDBC 테이블 생성과 삭제, 시퀸스, 입력, 수정, 삭제 

1. 실습
1) 내용입력받기
-----------------------------------------
Scanner sc = new Scanner(System.in);
String colm1 = sc.nextInt();
nextLine();			(Int타입은 엔터를 먹지 않기 때문에 추가)				& nextLine 을 쓰는 이유
String colm2 = sc.nextLine();

Board board = new Board();		(Board 클래스는 DTO)
board.setColm1(colm1);
board.setColm2(colm2);
-----------------------------------------

* DTO
=> DB로 전송할 데이터는 하나로 모아서 전송하는게 기본으로, 이때 데이터를 저장해 전달하는 클래스를 DTO라 한다	& 도메인
=> 이런 클래스를 도메인이라 부른다(패키지명을 도메인이라 지을것 *)
=> DTO 클래스는 필드값(칼럼명), 생성자 2개, setter, getter 메서드, TOSTRING(SELECT)으로 구성된다		& 도메인 형태
=> DTO의 변수는 DB의 칼럼명과 동일하게 지을것							& DTO 변수명

2) DB 연결 및 접속(try-catch문 사용)
* 사전작업
-----------------------------------------
Connection con = null;		(연결)
PreparedStatement ps = null;	(쿼리문 사전실행)


Class.forName("oracle.jdbc.OracleDriver");
-----------------------------------------
=> DB 연결을 위한 오라클 드라이버
(드라이버는 서로 다른 프로그램을 이어주는 도구로, DB마다, 오라클의 버전마다 파일이 다르다)			& 파일이 다르다
=> Class.forName() : 클래스 경로와 이름을 괄호안에 넣으면, 해당 클래스를 호출

---------------------------------------------------
String url = "jdbc:oracle:thin:@localhost:1521:xe";	(DB마다, DB의 버전마다 다름, 구글링으로 확인가능)	& url
---------------------------------------------------
=> xe : 서비스버전, 익스프레스 에디션 버전								
	
-----------------------------------------------------------							& cafe24 (홈페이지 도메인 생성)
String user = "scott";				(대소문자 구분x)
String password = "TIGER";				(대소문자 구분o)
con = DriverManager.getConnection(url, user, password)
-----------------------------------------------------------	
=> DriverManager : getConnection 메서드를 통해 connection을 반환하여 위의 정보를 통해 DB에 접속
=> 개인정보를 코드로 입력할 수는 없음
=> 프로퍼티 파일로 만들어서 해당 파일을 gitignore설정

3) 쿼리문 작성

* String sql = "";
* ctrl shift x (대문자변환) / y (소문자변환)

----------------------------------------------------------------------------------------------------------------------
CREATE : StringBuilder sb = new StringBuilder();
	sb.append("CREATE TABLE BOARD(");
	sb.append("BOARD_NO NUMBER NOT NULL CONSTRAINT PK_BOARD PRIMARY KEY,");		
	sb.append("TITLE VARCHAR2(100 BYTE) NOT NULL,");
	sb.append("CONTENT VARCHAR2(100 BYTE) NULL,");
	sb.append("HIT NUMBER NOT NULL,");
	sb.append("CREATE_DATE DATE NOT NULL)");  
	String sql =  sb.toString();

* 시퀸스 테이블을 같이 사용시, 시퀸스 테이블을 삭제하고 다시 만들지 않으면 해당 칼럼의 번호수가 리셋되지 않는다	& 시퀸스 번호 리셋

DROP : String sql = "Drop TABLE BOARD";

SEQUENCE : String sql = "CREATE SEQUENCE BOARD_SEQ NOCACHE";

INSERT : INSERT INTO 테이블명(칼럼1, 칼럼2) VALUES(값1, 값2) 
=> String sql = "INSERT INTO BOARD(BOARD_NO, TITLE, CONTENT, HIT, CREATE_DATE) VALUES(BOARD_SEQ.NEXTVAL, ?, ?, 0, SYSDATE)";


UPDATE : UPDATE 테이블명 SET 칼럼1 = 값1, 칼럼2 = 값2; 
=> String sql = "UPDATE BOARD SET CONTENT = ? WHERE BOARD_NO = ?";

DELETE : DELETE FROM 테이블명 WHERE 칼럼1 = 값1; 
=> String sql = "DELETE FROM BOARD WHERE BOARD_NO = ?";

----------------------------------------------------------------------------------------------------------------------

4) 쿼리문 사전 실행
* preparedStatement 객체 생성
-----------------------------------------
ps = con.prepareStatement(sql);
-----------------------------------------
=> connection 클래스의 prepareStatement 메서드(매개변수가 sql인)를 preparedStatement 객체에 저장 


* sql injection 방지(Statement 대신 prepareStatement 사용)						& sql injection 위험, preapredStatement를 쓰는 이유
=> Statement 방식 : 변수값을 쿼리문에 추가하는 방식으로, 보안에 매우 취약
=> id, pw 대신 쿼리문의 일부를 id, pw에 집어넣어 보안을 뚧음
ex) 
SQL문 	: SELECT * FROM User WHERE 아이디 = ? AND 비밀번호 =? 		(아이디 비밀번호를 조건으로 테이블 조회)
변수선언 : id = min, pw = 'OR 1=1 --						(아이디, 비밀번호 변수선언)
SELECT * FROM User WHERE ID = 'min' AND PW = ''OR 1=1 --	(비밀번호를 공백으로, OR 1=1로 무조건 조회가능)
=> 비밀번호가 맞지 않아도, OR1과 1은 무조건 실행가능조건, 뒤에 코드는 전부 주석처리(아이디에도 사용가능)



5) 쿼리문 ?에 변수 전달
* 입력, 출력, 삭제문에 해당
ex) "UPDATE BOARD SET CONTENT = ? WHERE BOARD_NO = ?"
------------------------------------------------
ps.setString(1, board.getContent1());
=> 첫번째 ?에 content 변수값 입력

ps.setInt(2, board.getBoard_no2());
=> 두번째 ?에 board_no 변수값 입력
------------------------------------------------
6) 쿼리문 실행
* 반환값이 int타입(0,1)
int result = ps.execute();
int result = ps.executeUpdate();

* 실행결과가 성공이면 1, 아니면 0
if(result > 0) {
	System.out.println("성공");
} else {
	System.out.println("실패");
}

7) catch 마무리

* 예외사항
(1) ClassNotFoundException : OracleDriver 로드 실패
(2) SQLException : DB 접속정보 오류

} catch (Exception e) {
	e.printStackTrace();
	} finally {
		try {
		if(ps != null)
			ps.close();
		if(con != null)
			con.close();
			} catch (Exception e) {
			e.printStackTrace();
}






