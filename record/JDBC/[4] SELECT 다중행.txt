[4] SELECT 전체조회문
* SELECT ONE과 달리 다중행을 조회하는 케이스

1. SELECT ONE과 전체조회의 공통점과 차이점							& 단일행 , 다중행 차이점
1) 공통점
=> 실행시 executeQuery 사용
=> ResultSet의 next() 메서드를 통해, 한행씩 값을 호출하며, 성공시 true, 실패시 false를 반환한다
=> DTO에 값을 저장할 때, ResultSet의 메서드를 이용해 칼럼의이름, 
     또는 칼럼순서로 값을 호출하여 저장한다

2) 차이점
=> 단일행을 조회할 때는 if문을, 다중행을 조회할 때는 while문을 사용


2. 실습
1) 쿼리문 작성
---------------------------------------------------------------------------------
String sql = "SELECT BOARD_NO, TITLE, CONTENT, HIT, 
	     CREATE_DATE FROM BOARD ORDER BY BOARD_NO DESC ";
---------------------------------------------------------------------------------

2) 쿼리문 사전실행
------------------------------------
ps = con.prepareStatement(sql);
------------------------------------

3) 쿼리문 실행
----------------------------
rs = ps.executeQuery();
----------------------------

4) 모든 조회를 저장할 ArrayList 생성								& List 가 필요한 이유
* 테이블의 행 하나당 DTO 하나가 필요하고, 여러 행을 저장할 시, ArrayList가 필요하게됨	
----------------------------------------------------------------
List<Board> boards = new ArrayList<>();
----------------------------------------------------------------
		


5) 조회한 값을 DTO에 저장(while문)
(1) DTO 생성자	
--------------------------------								& 다중행 저장
while(rs.next()) {
Board board = new Board();	
--------------------------------						
=> DTO에 저장하는 방법은 (1)매개변수 생성자에 저장하는법, (2)메서드를 이용하는법 두가지가 있다) & 2번 추천

(2) DTO에 저장
----------------------------------------------------------------
board.setBoard_no(rs.getInt("BOARD_NO");
board.setTitle(rs.getString("TITLE"));
board.setContent(rs.getString("CONTENT"));
board.setHit(rs.getInt("HIT"));
board.setCreate_date(rs.getDate("CREATE_DATE"));
----------------------------------------------------------------
=> 별도로 변수에 저장후 넣지말고, ResultSet의 메서드로 호출해서 바로 DOMAIN에 저장

(3) LIST에 DTO들을 저장									& 저장 체이싱
------------------------
boards.add(board);
------------------------
=> ArrayList에 추가하는 메서드는 add();


6) ArrayList에 저장된 board 확인
(1) 일반 for문
-------------------------------------------------
for(int i = 0; i < boards.size(); i++) {
	System.out.println(boards.get(i)); }
-------------------------------------------------
(2) 향상 for문
-------------------------------------------------
for(Board board : boards) 
	System.out.println(board);
-------------------------------------------------
* ArrayList의 메서드
(1) add() : 추가
(2) size() : 배열의 길이
(3) get(i) : 값 불러오기



7) try-catch 마무리
--------------------------------------------------------
} catch (Exception e) {
		e.printStackTrace();
	} finally {
		try {
		if( rs != null)
			rs.close();
		if( ps != null)
			ps.close();
		if( con != null)
			con.close();
		} catch (Exception e) {
		e.printStackTrace();
	}
}
--------------------------------------------------------


2. 


3. 