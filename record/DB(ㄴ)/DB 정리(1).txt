& DB 정리

[1] DB 개념

1. 개념
=> 여러사람에 의해 공유되어 사용될 목적으로 통합, 구조화되어, 저장, 관리되는 데이터
=> 여러 사람들이 한가지 데이터를 동시 수정함을 가능하게 해줌

2. 장점
=> 파일시스템의 단점을 보완
(보안X, 데이터 중복저장으로 인한 저장장소 낭비, 공유X, 명령어X)

3. DBSM
=> 데이터베이스 관리 시스템
=> RELATION DB를 주로 많이 사용(ORACLE, MYSQL 등)

[2] 설치 및 세팅

1. 설치
1) ORACLE 설치
=> https://www.oracle.com/database/technologies/xe-prior-release-downloads.html
2)  SQL Developer 설치
=> https://www.oracle.com/tools/downloads/sqldev-downloads-2041.html

2. 세팅
1) 환경변수 **
(1) %ORAC_HOME%\bin : 시스템 변수를 생성하고 경로 저장
(2) PATH에 %ORAC_HOME%\bin 추가
=> 이로서 모든 경로에서 C:\oraclexe\app\oracle\product\11.2.0\server\bin
경로에 접근 가능해진다

[3] 사용자 생성 및 권한 쿼리문
A
* SQL DEVELOPER 또는 SQLPLUS에서 입력가능
1. 계정
1) 관리자 계정
=> sys, system 계정이 있다
(1) sys : sys / as sysdba, sysoper
(2) system/비번

2) 연습용 계정
=> scott, hr

* 사용하려면, 관리자 계정을 통한 잠금해제가 필요하다
(1) SCOTT
ALTER USER SCOTT IDENTIFIED BT TIGER ACCOUNT UNLOCK;

* 오류 발생시, scott.sql 사용
=> scott.sql은 계정 활성화를 위한 쿼리문이 존재하는 파일
=> scott 계정의 샘플 데이터를 생성하기 위한 쿼리문이 함께 존재

{1} 경로 : C:\oraclexe\app\oracle\product\11.2.0\server\rdbms\admin\scott.sql
{2} 실행 : sqlplus 실행 후 @C:\oraclexe\app\oracle\product\11.2.0\server\rdbms\admin\scott.sql 입력
{3} 이후 scott 계정 재접속 시도


(2) HR
ALTER USER HR ACCOUNT UNLOCK;
ALTERUSER HR IDENTIFIED BY 2222; (비밀번호 변경)

2. 계정 생성과 삭제
1) create user 유저명 identified by 비밀번호
2) drop user 유저명 cascade;
(cascade는 가지고있는 테이블과 권한 상관없이 강제로 지우게 하는 쿼리문)

3. 권한부여와 취소
1) 부여 : grant connect, resource to 유저명
2) 취소 : revoke connect, resource from 유저명
(connect는 접속권한, resource는 테이블 관리 권한이다)

[3] RDB 기본용어
* RDB는 관계형 데이터베이스의 줄임말

1.  TABLE
=> 행과 열을 가진 표 형태의 데이터
=> RDB에서는 릴레이션이라고도 함

2. 테이블구성
=> 행: 로우, 레코드, 튜플	=> 값을 객체(인스턴스)
=> 열: 칼럼, 필드, 속성	=> 값을 ?

3. 테이블 용어
=> 도메인 : 한 칼럼이 가진 데이터값
=> 차수(DEGREE)		: 한 테이블 칼럼의 개수 *	 
=> 기수(CARDINALITY) 	: 한 테이블 로우의 개수 *

[4] 키(식별자)

1. 정의
=> 하나의 테이블에서 각 로우를 고유하게 식별할 수 있는 칼럼 또는 칼럼의 조합을 의미

1) 슈퍼키 : 로우를 식별할 수 있는 칼럼의 집합들
=> 슈퍼키의 조건 : 유일성,모든 로우가 서로 다른값을 가지는지?
* 슈퍼키는 복수의 칼럼을 하나의 키로서 사용할 수 있다
ex) 이름 + 전화번호

2) 후보키
=> 후보키의 조건: 슈퍼키의 유일성 + 최소성을 지님(최소한의 칼럼수)
ex) 2개의 칼럼으로 구성된 키보다는 하나의 칼럼으로 구성된 키

3) 기본키(pk) *
=> 유일성, 최소성을 지녔으며, 개체무결성 특징을 지님
* 개채무결성
(1) not null : 칼럼값 내에 null값을 가질 수 없음
(2) unique : 칼럼값이 중복될 수 없음

4) 대체키 
=> 기본키가 못된 모든 키들을 말한다

5) 외래키(fk) *
=> 다른 테이블과 관계를 형성하기 위한 키로, 참조무결성의 특징을 지닌다
=> 외래키는 중복가능하고 NULL도 가능
* 참조무결성
(1) 관계를 맺은 기본키의 도메인을 가져야 하며, 여기서 벗어난 값을 지닐 수 없다

* ERD에서 실선인 이유 : NOT NULL이 아니기 떄문(OPTIONAL) **

* 기본키를 가지면 부모테이블, 외래키를 가지면 자식테이블이다
* 기본키가 사라지는 경우
ON DELETE SET NULL; : 해당 기본키값이 사라지면 NULL값으로 변환 
ON DELETE CASCADE; : 해당 기본키 값이 사라지면 데이터 삭제

[5] 관계
1. 일대 다 관계
=> 참조되는 쪽이 참조하는 쪽의 여러 객체를 가질 수 있음

2. 다대 다 관계 ***
=> 두 테이블간에 직접 연결은 불가능하고, 사이에 새로운 테이블을 생성 **
ex) 사원과 프로젝트 테이블이 다대다 관계라면,
     프로젝트에 참여한 사원 테이블을 별도로 만들어야한다 **


[6] 테이블 생성

1. 개념적 설계(ERD)
=> 객체(ROW)는 사각형으로,
=> 속성(COLUMN)은 타원으로,
=> 관계(RELATIONSHIP)는 마름모로 표현


* 그 외에도 추상적 설계, 물리적 설계가 있음?

















