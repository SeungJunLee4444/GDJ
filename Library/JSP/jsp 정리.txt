[1] JSP 기초

1. 개념정리

1)  jsp의 개념
- java server page의 약자
- html에 java 코드를 넣어 동적 웹페이지를 생성하는 웹에플리케이션을 말한다
- 

- 웹 어플리케이션 : 웹에서 실행되는 응용프로그램
(1) 웹 브라우저 : ex 크롬
(2) 웹 서버 : 클라이언트로부터 요청받아 서버에 저장된 리소스를 클라이언트에게 응답
주로 정적컨텐츠 담당
(3) 웹 어플리케이션 서버(was) : 서버에서 필요한 기능을 수행하기 그 결과를 웹 서버에 전달
(4) 데이터베이스 : 서비스에 필요한 데이터를 보관, 갱신, 관리한다

(5) 자바 서블릿
- 서블릿이란 웹 페이지를 동적으로 생성하기 위해 서버측 프로그램을 의미
- 자바 언어를 기반으로 만들어지며, was(ex 톰캣)위에서 컴파일되고 동작한다
(서블릿은 jvm이 아닌 was의 컨테이너에서 작동한다)

2) web server과 와 was의 차이

1) web server
- 정의 : client의 요청을 받아 정적인 콘텐츠(html, css, js)를 응답하는 서버
- ex) Apache, Nginx, IIS, WebtoB
- 항상 동일한 페이지를 반환
- 일반적으로 웹 서버란 컴퓨터의 소프트웨어 프로그램을 의미

2) was
- web application server의 약자
- 정의 : 클라이언트의 요청을 받아 DB조회, 로직을 처리하는 동적인 컨텐츠를
응답하는 서버
- ex) Tomcat

3) web server과 was의 차이
- 어떤 컨텐츠를 제공하냐에 따라 구분된다(정적 / 동적)
- 대부분 was는 정적인 컨텐츠를 제공해주기 떄문에, was가 webserver을 포함하는 개념이라 볼 수 있다


4) web server과 was를 같이 써야하는 이유
- 결론 : 효율성때문
=> 정적인 컨텐츠는 web server, 동적인 컨텐츠는 was로 처리

5) 서블릿(java ee)
- 웹페이지를 동적으로 생성할 때 사용되는 서버측 프로그램
- 자바 서블릿은 자바 ee사양의 일부분으로 클라이언트 요청에 대해 처리하는
역할을 하는 자바프로그램

6) 웹 컨테이너=서블릿컨테이너
- 자바 기반 서버를 서블릿 컨테이너라 부른다
- java 서블렛과 상호작용하는 was의 구성요소
- was 내부에서 서블릿을 관리
- 구성 : init(), service(), doGet(), doPost()
- 역할 : 웹서버와의 통신지원 
- 서블릿 객체 생성, 서블릿 관리

7) was와 서블릿은 동일한 개념이 아니다

was => 톰캣
서블릿 => 자바 ee내 

- 웹 서버와 웹 컨테이너가 합쳐진 형태
- 웹 서버가 단독으로 처리못하는 db조회나 다양한 로직 처리가 가능
- 사용자의 요구에 따라 변하는 동적인 컨텐츠를 처리하기 위해 사용
- 웹 서버는 was(톰캣)에 요청을 넘겨 처리된 결과를 응답받아 동적 서버가 될 수 있다
- 웹서버에 의해 실행되는 프로그램을 통해 만들어진 결과물
(ex servlet : was 위에서 돌아가는 자바 프로그램)
- 대표적으로 톰켓이 있음
- 웹 컨테이너 또는 서블릿 컨테이너라고도 불림
- jsp, servlet을 쓸 수 있는 환경 제공

& 둘을 구분하는 이유 : 효율성 때문
=> 정적인 콘텐츠는 web server 로 처리, 동적인 컨텐츠는 was로 처리

2. 파일생성




 * - 서블릿 컨테이너 : 
 * - 서블릿들의 생성, 실행, 파괴를 담당
 * - 서블릿을 작동시키는 역할(+관리) ex 톰캣
 * 
 * & was는 servlet을 포함하는 개념
 * - was는 웹 서버 + 웹 컨테이너로 구성되있으며, 웹서버로 정적 콘텐츠를, 웹 컨테이너를 이용해
 * 내부 로직을 거쳐 동적 페이지를 보여준다
 * - 자바는 웹 구현 기술로 서블릿(java ee의 클래스)를 사용하며, servlet를 관리하고 jsp파일을
 * 실행할 수 있게 만들어주는 것이 서블릿 컨테이너다
 * 


3) jsp와 서블릿의 차이